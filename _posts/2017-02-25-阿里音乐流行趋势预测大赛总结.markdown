---
layout: post
title:  "阿里音乐流行趋势预测大赛总结"
date:   2017-02-25
categories: machine_learning  
tags: machine_learning
---
在去年参加了阿里巴巴在天池大数据平台上举办的一个天池大数据比赛，题目是阿里巴巴音乐流行趋势预测大赛。天池大数据平台上的比赛其实还是很锻炼人的，主要的优势在于阿里提供了
在真实的业务场景下的数据,并且提供了基于ODPS的大数据平台数加平台使得我们这些在校学生可以在比赛中见到真实的业务数据，学会怎么样去了解这个数据，并且了解了大数据平台，知
道了当数据量更大时可以使用更有力的工具来进行工作。比赛共分为两个赛季，第一个赛季需要我们下载数据集在线下进行预测，第二个赛季数据集无法下载，我们需要采用数加平台
上提供的算法工具和SQl来进行预测。<br>
## 题目要求：
题目的具体要求见天池大数据比赛的网站：
<https://tianchi.shuju.aliyun.com/competition/introduction.htm?spm=5176.100068.5678.1.azXTEs&raceId=231531>
## 题目分析：
阿里音乐提供了阿里音乐用户在历史一段时间内的历史播放数据为基础，期望参赛者可以通过对于阿里音乐平台上每个阶段一人的试听量进行
预测，挖掘出即将成为潮流的艺人，从而实现对一个时间段内音乐流行趋势的准确把控。<br>
其中提供了两张表作为已知数据，分别是用户的行为表(mars_tianchi_user_actions)和歌曲艺人表(mars_tianchi_songs),其
中用户行为表如下:<br>
![mars_tianchi_user_actions](/assets/img/tianchi_music/mars_tianchi_user_actions.png)<br>
用户行为主要包含的是用户的行为信息，表示摸一个用户在某一时刻对于某一首歌进行了什么样的操作(1，播放；2，下载，3，收藏).
歌曲艺人表如下:<br>
![mars_tianchi_songs](/assets/img/tianchi_music/mars_tianchi_songs.png)<br>
这张表对应了歌曲和艺人之间的对应关系，这样就可以把上张表中对于歌的操作统计，计算出不同歌手在不同的时间段
被多少人进行了什么样的操作。
要提交的结果表的样子如下：<br>
![mars_tianchi_artist_plays_predict](/assets/img/tianchi_music/mars_tianchi_artist_plays_predict.png)<br>
即每一个歌手在未来一个时间段内每一天内的播放数据。<br>
需要我们对于未来的两个月的播放量来进行预测，测评的公式为<br>
![evaluation](/assets/img/tianchi_music/evaluation.png)<br>
## 歌手的播放曲线
将几个具有代表性的歌手播放的历史数据绘制出来如下：<br>
![singer1_history](/assets/img/tianchi_music/singer1_history.jpg)<br>
![singer2_history](/assets/img/tianchi_music/singer2_history.jpg)<br>
![singer3_history](/assets/img/tianchi_music/singer3_history.jpg)<br>
总体来看，每一个歌手的每一种行为之间有一些内在关系，但是作用不是很大，所以主要考虑的是通过下面几种方式来预测:
1.将一个歌手的播放量当做一个时间序列，常见有一些时间序列处理的办法，如ARIMA模型(Autoregressive Integrated Moving Average Model)，ARMA模型。这些模型都是利用移动平均数和自回归来进行预测的。如果时间序列不平稳的话可以考虑进行一阶差分二阶差分等得到一个平稳的序列来利用ARIMA和类似ARIMA的模型，但是问题在于歌手播放量的时间序列很难转化为平稳的时间序列，并且这类模型都是用于短时预测，而不是长时预测，而我们需要预测未来的两个月。
1.另一种方式是时间序列分解，即将原来的时间序列分解为季节性成分，总趋势成分和随机噪声成分，然后利用这三部分去进行将来的预测。但是这播放的历史数据的噪声实在是太大，噪声占据了主要的成分，我们期待的趋势成分和季节性成分都很小。这个模型也失败了。
1.最后我们采取的方式是根据歌手的类型主要将歌手分为两大类，第一类，如singer2，达到一个顶峰然后下降，这有可能是该歌手发新歌或者其他异常事件如歌被别人翻唱红了，然后慢慢的播放量下降最终趋于不变，这类似于负指数函数，所以我们通过判断一个显著的高点找到负指数函数的起点然后进行负指数函数的回归；对于其他的歌手进行线性回归或者sigmoid回归。在实验过程中发现我们实验出的曲线有时候会一直下降或者上升会在时间比较远时达到一个不可思议的值，所以根据经验阈值进行了判断限制。除此以外，我们还考虑过在歌手的粒度上进行回归是不是会损失了歌曲自身携带的信息，需不需要对于单曲的播放量来进行回归预测然后累积，实验证明这也是不可行的，因为单曲的播放曲线规律性更弱。另外我们还尝试过其他很多的回归方法，如提取一些特征值，采用滑动窗口加上随机森林来预测未来的播放量，但是由于样本过于少，而且模型很难对于未来进行长时预测也失败了。对于歌手分类这里我们想到了，但是做的不够彻底，在其他选手陆续分享的比赛心得中可以看到对于不同类型的歌手来进行不同方式的回归还是很有效的。
## 其他选手带来的启示
其实我们在很多地方还是和成绩比较好的选手想法比较一致，比如在未来的时间里爆发式的增长是无法预测的，比如解决问题的粒度需要比较大，微观的信息难以使用。其他的选手对于评测函数理解更深刻，比较小的预测值会得到比较好的分数。甚至有人对于评测函数求导得到了最优解，根据最优解进行预测。其他选手对于变量的控制很到位，也有人从评测结果中获得信息反馈的。
总体来说这次比赛做的并不是很好，第一个赛季和第二个赛季的成绩都在200~300名左右，主要存在的问题是：
*   对于实际的数据没有处理的经验，在数据的预处理方面做的不好;
*   对于要解决的问题定位不是很准确，没有对于目标函数和实际的场景进行深入的思考;
*   线下实验的过程中没有进行对于每一次实验进行控制变量和有效的记录，所以难以定位何种变化会带来评测的提升。
*   线上实验里对于ODPS和数加平台不熟悉加上第一赛季的算法效果还不够好，导致第二赛季几乎没有提高。
希望在将来可以有机会再参加类似的比赛，在分析问题时能更抓住问题的本质。
